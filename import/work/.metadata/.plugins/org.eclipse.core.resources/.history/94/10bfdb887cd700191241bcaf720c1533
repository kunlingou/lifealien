package com.jiuqi.ldrsz.datainitial.springjdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

import javax.sql.DataSource;

import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.dao.DataAccessException;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.ResultSetExtractor;
import org.springframework.jdbc.core.SqlProvider;
import org.springframework.jdbc.core.StatementCallback;
import org.springframework.jdbc.support.JdbcUtils;
import org.springframework.lang.Nullable;
import org.springframework.util.Assert;

import com.jiuqi.np.gams2.datatrans.type.TypeUtil;


public class TargetDBTemplate extends JdbcTemplate {
	
	private String driverClassName;

	public TargetDBTemplate(DataSource dataSource) {
		super(dataSource);
	}
	
	public String getDriverClassName(){
		return driverClassName;
	}
	
	public void setDriverClassName(String driverClassName){
		this.driverClassName = driverClassName;
	}
	
	@Override
	@Nullable
	public <T> T query(final String sql, final ResultSetExtractor<T> rse) throws DataAccessException {
		Assert.notNull(sql, "SQL must not be null");
		Assert.notNull(rse, "ResultSetExtractor must not be null");
		if (logger.isDebugEnabled()) {
			logger.debug("Executing SQL query [" + sql + "]");
		}

		class QueryStatementCallback implements StatementCallback<T>, SqlProvider {
			@Override
			@Nullable
			public T doInStatement(Statement stmt) throws SQLException {
				ResultSet rs = null;
				try {
					rs = stmt.executeQuery(sql);
					return rse.extractData(new com.jiuqi.ldrsz.datainitial.springjdbc.ResultSet(rs));
				}
				finally {
					JdbcUtils.closeResultSet(rs);
				}
			}
			@Override
			public String getSql() {
				return sql;
			}
		}

		return execute(new QueryStatementCallback());
	}
	
	@Override
	public int update(String sql, @Nullable Object... args) throws DataAccessException {
		return formatAndUpdate(sql, args);
	}

	private int formatAndUpdate(String sql, Object[] args) {
		if(args != null) {
			String[] split = sql.split("\\?");
			StringBuffer sql0 = new StringBuffer();
			LinkedList<Object> args0 = new LinkedList<Object>();
			for(int i=0,len=args.length;i<len;i++) {
				Object arg = args[i];
				String sqlparam = null;
				if(arg != null && arg instanceof List) {
					Object[] a = new Object[((List<?>)arg).size()];
					Arrays.fill(a, "?");
					sqlparam = TypeUtil.arrayToDelimitedString(a,",");
					args0.addAll(((List<?>)arg));
				}else {
					sqlparam = "?";
					args0.add(arg);
				}
				sql0.append(split[i]);
				sql0.append(sqlparam);
				/**最后一个？后是否有字符串*/
				if(len == i+1 && split.length == len+1) {
					sql0.append(split[i+1]);
				}
			}
			return update(sql0.toString(), newArgPreparedStatementSetter(args0.toArray()));
		}
		return update(sql, newArgPreparedStatementSetter(args));
	}
}
