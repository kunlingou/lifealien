package com.jiuqi.ldrsz.datashow.kpi;

import java.text.DecimalFormat;
import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.stream.Collectors;

import com.jiuqi.ldrsz.datainitial.entiy.Card;
import com.jiuqi.ldrsz.datainitial.entiy.ClassType;
import com.jiuqi.ldrsz.datainitial.entiy.Plan;
import com.jiuqi.ldrsz.datainitial.entiy.Staff;
import com.jiuqi.ldrsz.datainitial.entiy.Unit;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataObject;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataObjects;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataProvider;

/**
 * 执行率
 * @author goukunlin
 *
 */
public class ZhixlKpi implements IKpi{

	@Override
	public Object execute(List<Card> cards, Object... objects) {
		Unit unit = Unit.class.cast(objects[0]);
		
		//房屋软件
		Set<String> a = new HashSet<>();
		a.add("90E67FBDB28D43A5AFD9EF2441CEC05E");
		a.add("EB91E62FDE4948AB89AED9E42651C9E1");
		
		//计划配置资产数量
		AtomicInteger planNum = new AtomicInteger(0);
		BaseDataObjects<Plan> planInfo = new BaseDataProvider().findAll(Plan.class);
		planInfo.getBaseDataObjects().stream().filter(e->e.getUnitid().equals(unit.getId()) && !a.contains(e.getBs_type())).collect(Collectors.summarizingDouble(e->e.getBs_count()));
		planInfo.getBaseDataObjects().forEach(e->{
			if(e.getUnitid().equals(unit.getId()) && !a.contains(e.getBs_type())) {
				planNum.addAndGet(e.getBs_count());
			}
		});
		
		//实际数量
		AtomicInteger actualNum = new AtomicInteger(0);
		cards.forEach(e->{
			if(!a.contains(e.getTypeid())) {
				actualNum.addAndGet(1);
			}
		});
		
		double result = (float)planNum.get()/actualNum.get();
		
		if(result>2) {
			return 0;
		}else if(result>1.5) {
			return 1;
		}else if(result>1.3) {
			return 2;
		}else if(result>1.15) {
			return 3;
		}else if(result>1.05) {
			return 4;
		}else if(result>0.95) {
			return 5;
		}else if(result>0.85) {
			return 4;
		}else if(result>0.7) {
			return 3;
		}else if(result>0.5) {
			return 2;
		}else if(result>0.3) {
			return 1;
		}else {
			return 0;
		}
	}

}
