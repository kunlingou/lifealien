package com.jiuqi.ldrsz.datainitial.factory;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.orm.hibernate5.HibernateOperations;

import com.jiuqi.ldrsz.datainitial.entiy.Unit;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataObject;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataObjects;
import com.jiuqi.ldrsz.datainitial.provider.BaseDataProvider;
import com.jiuqi.ldrsz.datainitial.provider.RSReadAndWriter;
import com.jiuqi.ldrsz.datainitial.service.DataInitialCacheService;
import static com.jiuqi.ldrsz.datainitial.constant.QueryConst.*;

import java.util.List;
import java.util.Map.Entry;
/**
 * @author zhangweimin
 *
 */
public class DataInitServiceBeanFactory implements InitializingBean {
	@Autowired
	DataInitialCacheService initCacheService;
//	@Autowired
//	private HibernateOperations template;
	@Autowired
	private JdbcTemplate template;
	
	@Override
	public void afterPropertiesSet() throws Exception {
		String value = "";
		String key = "";
		initCacheService.putCache(key, value);
		
		initBaseData();
	}

	private void initBaseData() {
		buildQueryMap();
		
		for(Entry<Class<? extends RSReadAndWriter>, String> entry : query.entrySet()) {
			Class<? extends RSReadAndWriter> key = entry.getKey();
			
			BaseDataObjects<Unit> baseDataObjects = new BaseDataObjects<>();
			template.query(entry.getValue(), rs->{
				RSReadAndWriter t;
				try {
					t = key.newInstance();
					t.Read(rs);
					if(t instanceof BaseDataObject) {
						baseDataObjects.addBaseDataObject((Unit)t);
					}
				} catch (InstantiationException e) {
					e.printStackTrace();
				} catch (IllegalAccessException e) {
					e.printStackTrace();
				}
			});
			initCacheService.putCache(BaseDataProvider.getFullKey(key), baseDataObjects);
		}
	}
	
	private <T extends BaseDataObject> void initBaseData(Class<T> key, String sql) {
		BaseDataObjects<T> baseDataObjects = new BaseDataObjects<>();
		template.query(sql, rs->{
			BaseDataObject t;
			try {
				t = key.newInstance();
				t.Read(rs);
				if(t instanceof BaseDataObject) {
					baseDataObjects.addBaseDataObject((T)t);
				}
			} catch (InstantiationException e) {
				e.printStackTrace();
			} catch (IllegalAccessException e) {
				e.printStackTrace();
			}
		});
		initCacheService.putCache(BaseDataProvider.getFullKey(key), baseDataObjects);
	}

	private void buildQueryMap() {
		query.put(Unit.class, query_md_unit);
	}

}
